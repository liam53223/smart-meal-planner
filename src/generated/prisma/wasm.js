
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  primaryGoal: 'primaryGoal',
  preferencesJson: 'preferencesJson'
};

exports.Prisma.UserPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  cookingSkillLevel: 'cookingSkillLevel',
  maxPrepTimeMinutes: 'maxPrepTimeMinutes',
  budgetRange: 'budgetRange',
  householdSize: 'householdSize',
  hasOven: 'hasOven',
  hasStove: 'hasStove',
  hasMicrowave: 'hasMicrowave',
  hasBlender: 'hasBlender',
  hasAirFryer: 'hasAirFryer',
  hasSlowCooker: 'hasSlowCooker',
  hasInstantPot: 'hasInstantPot',
  mealsPerDay: 'mealsPerDay',
  snacksPerDay: 'snacksPerDay',
  batchCookingPreference: 'batchCookingPreference',
  energyRestrictionGoal: 'energyRestrictionGoal',
  targetCaloriesMin: 'targetCaloriesMin',
  targetCaloriesMax: 'targetCaloriesMax',
  cuisinePreferences: 'cuisinePreferences',
  spiceTolerance: 'spiceTolerance',
  flavorIntensity: 'flavorIntensity',
  knifeSkillLevel: 'knifeSkillLevel',
  preferredTechniques: 'preferredTechniques',
  recipeComplexityComfort: 'recipeComplexityComfort',
  weeklyFoodBudget: 'weeklyFoodBudget',
  shoppingFrequency: 'shoppingFrequency',
  mealPlanningApproach: 'mealPlanningApproach',
  textureLimitations: 'textureLimitations',
  foodsToAvoid: 'foodsToAvoid',
  mealTimingPreference: 'mealTimingPreference',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HealthConditionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category'
};

exports.Prisma.UserHealthConditionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  healthConditionId: 'healthConditionId',
  severity: 'severity',
  diagnosedDate: 'diagnosedDate'
};

exports.Prisma.AllergenScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category'
};

exports.Prisma.UserAllergyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  allergenId: 'allergenId',
  severity: 'severity'
};

exports.Prisma.ApplianceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  category: 'category'
};

exports.Prisma.UserApplianceScalarFieldEnum = {
  id: 'id',
  userPreferencesId: 'userPreferencesId',
  applianceId: 'applianceId',
  usageFrequency: 'usageFrequency'
};

exports.Prisma.UserBehaviorScalarFieldEnum = {
  id: 'id',
  userPreferencesId: 'userPreferencesId',
  portionControlMotivation: 'portionControlMotivation',
  habitChangeReadiness: 'habitChangeReadiness',
  socialEatingPattern: 'socialEatingPattern',
  successTrackingPreference: 'successTrackingPreference',
  activityLevel: 'activityLevel',
  healthConditionPriority: 'healthConditionPriority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SpiceBlendScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  activeCompounds: 'activeCompounds',
  clinicalEvidence: 'clinicalEvidence',
  primaryBenefit: 'primaryBenefit',
  effectiveDoseGrams: 'effectiveDoseGrams',
  bioavailabilityHack: 'bioavailabilityHack',
  quickApplications: 'quickApplications'
};

exports.Prisma.RecipeSpiceBlendScalarFieldEnum = {
  id: 'id',
  recipeId: 'recipeId',
  spiceBlendId: 'spiceBlendId',
  amountGrams: 'amountGrams'
};

exports.Prisma.RecipeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  servings: 'servings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  prepTimeMinutes: 'prepTimeMinutes',
  cookTimeMinutes: 'cookTimeMinutes',
  totalTimeMinutes: 'totalTimeMinutes',
  complexity: 'complexity',
  costTier: 'costTier',
  requiredAppliances: 'requiredAppliances',
  goalTags: 'goalTags'
};

exports.Prisma.RecipeIngredientScalarFieldEnum = {
  id: 'id',
  recipeId: 'recipeId',
  name: 'name',
  amount: 'amount',
  unit: 'unit',
  notes: 'notes'
};

exports.Prisma.RecipeInstructionScalarFieldEnum = {
  id: 'id',
  recipeId: 'recipeId',
  stepNumber: 'stepNumber',
  instruction: 'instruction'
};

exports.Prisma.NutritionalInfoScalarFieldEnum = {
  id: 'id',
  recipeId: 'recipeId',
  calories: 'calories',
  protein: 'protein',
  carbohydrates: 'carbohydrates',
  fat: 'fat',
  fiber: 'fiber',
  sugar: 'sugar',
  sodium: 'sodium',
  cholesterol: 'cholesterol',
  vitaminC: 'vitaminC',
  vitaminD: 'vitaminD',
  calcium: 'calcium',
  iron: 'iron',
  potassium: 'potassium'
};

exports.Prisma.MedicalTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  condition: 'condition'
};

exports.Prisma.RecipeMedicalTagScalarFieldEnum = {
  id: 'id',
  recipeId: 'recipeId',
  medicalTagId: 'medicalTagId'
};

exports.Prisma.DietaryTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category'
};

exports.Prisma.RecipeDietaryTagScalarFieldEnum = {
  id: 'id',
  recipeId: 'recipeId',
  dietaryTagId: 'dietaryTagId'
};

exports.Prisma.PracticalTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category'
};

exports.Prisma.RecipePracticalTagScalarFieldEnum = {
  id: 'id',
  recipeId: 'recipeId',
  practicalTagId: 'practicalTagId'
};

exports.Prisma.NutritionalTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category'
};

exports.Prisma.RecipeNutritionalTagScalarFieldEnum = {
  id: 'id',
  recipeId: 'recipeId',
  nutritionalTagId: 'nutritionalTagId'
};

exports.Prisma.MealPlanScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  weekStartDate: 'weekStartDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MealPlanItemScalarFieldEnum = {
  id: 'id',
  mealPlanId: 'mealPlanId',
  recipeId: 'recipeId',
  dayOfWeek: 'dayOfWeek',
  mealType: 'mealType',
  servings: 'servings'
};

exports.Prisma.ShoppingListScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  mealPlanId: 'mealPlanId',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShoppingListItemScalarFieldEnum = {
  id: 'id',
  shoppingListId: 'shoppingListId',
  name: 'name',
  amount: 'amount',
  unit: 'unit',
  category: 'category',
  purchased: 'purchased',
  estimatedPrice: 'estimatedPrice'
};

exports.Prisma.UserFavoriteRecipeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  recipeId: 'recipeId',
  addedAt: 'addedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  status: 'status',
  tier: 'tier',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  recipeId: 'recipeId',
  rating: 'rating',
  notes: 'notes',
  timestamp: 'timestamp'
};

exports.Prisma.ABTestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  feature: 'feature',
  variant: 'variant',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.DietaryGoal = exports.$Enums.DietaryGoal = {
  WEIGHT_LOSS: 'WEIGHT_LOSS',
  MUSCLE_GAIN: 'MUSCLE_GAIN',
  MEDICAL_CONDITION: 'MEDICAL_CONDITION',
  LIFESTYLE_DIET: 'LIFESTYLE_DIET',
  GENERAL_HEALTH: 'GENERAL_HEALTH'
};

exports.CookingSkill = exports.$Enums.CookingSkill = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED'
};

exports.BudgetRange = exports.$Enums.BudgetRange = {
  BUDGET: 'BUDGET',
  MODERATE: 'MODERATE',
  PREMIUM: 'PREMIUM'
};

exports.HealthCategory = exports.$Enums.HealthCategory = {
  DIGESTIVE: 'DIGESTIVE',
  METABOLIC: 'METABOLIC',
  AUTOIMMUNE: 'AUTOIMMUNE',
  CARDIOVASCULAR: 'CARDIOVASCULAR',
  HORMONAL: 'HORMONAL',
  NEUROLOGICAL: 'NEUROLOGICAL',
  OTHER: 'OTHER'
};

exports.Severity = exports.$Enums.Severity = {
  MILD: 'MILD',
  MODERATE: 'MODERATE',
  SEVERE: 'SEVERE'
};

exports.AllergenCategory = exports.$Enums.AllergenCategory = {
  FOOD: 'FOOD',
  ENVIRONMENTAL: 'ENVIRONMENTAL',
  MEDICATION: 'MEDICATION',
  OTHER: 'OTHER'
};

exports.DietaryCategory = exports.$Enums.DietaryCategory = {
  RESTRICTION: 'RESTRICTION',
  PREFERENCE: 'PREFERENCE',
  LIFESTYLE: 'LIFESTYLE',
  RELIGIOUS: 'RELIGIOUS'
};

exports.PracticalCategory = exports.$Enums.PracticalCategory = {
  TIME: 'TIME',
  EQUIPMENT: 'EQUIPMENT',
  SKILL: 'SKILL',
  BATCH_COOKING: 'BATCH_COOKING'
};

exports.NutritionalCategory = exports.$Enums.NutritionalCategory = {
  MACRONUTRIENT: 'MACRONUTRIENT',
  MICRONUTRIENT: 'MICRONUTRIENT',
  SPECIAL_FOCUS: 'SPECIAL_FOCUS'
};

exports.DayOfWeek = exports.$Enums.DayOfWeek = {
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY',
  SUNDAY: 'SUNDAY'
};

exports.MealType = exports.$Enums.MealType = {
  BREAKFAST: 'BREAKFAST',
  LUNCH: 'LUNCH',
  DINNER: 'DINNER',
  SNACK: 'SNACK'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  CANCELED: 'CANCELED',
  PAST_DUE: 'PAST_DUE',
  TRIALING: 'TRIALING',
  INCOMPLETE: 'INCOMPLETE'
};

exports.SubscriptionTier = exports.$Enums.SubscriptionTier = {
  MEDICAL_BASIC: 'MEDICAL_BASIC',
  MEDICAL_PREMIUM: 'MEDICAL_PREMIUM',
  MEDICAL_SPECIALIST: 'MEDICAL_SPECIALIST',
  LIFESTYLE_STARTER: 'LIFESTYLE_STARTER',
  LIFESTYLE_PREMIUM: 'LIFESTYLE_PREMIUM',
  LIFESTYLE_FAMILY: 'LIFESTYLE_FAMILY',
  WHITE_LABEL_NUTRITIONIST: 'WHITE_LABEL_NUTRITIONIST',
  WHITE_LABEL_CLINIC: 'WHITE_LABEL_CLINIC'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserPreferences: 'UserPreferences',
  HealthCondition: 'HealthCondition',
  UserHealthCondition: 'UserHealthCondition',
  Allergen: 'Allergen',
  UserAllergy: 'UserAllergy',
  Appliance: 'Appliance',
  UserAppliance: 'UserAppliance',
  UserBehavior: 'UserBehavior',
  SpiceBlend: 'SpiceBlend',
  RecipeSpiceBlend: 'RecipeSpiceBlend',
  Recipe: 'Recipe',
  RecipeIngredient: 'RecipeIngredient',
  RecipeInstruction: 'RecipeInstruction',
  NutritionalInfo: 'NutritionalInfo',
  MedicalTag: 'MedicalTag',
  RecipeMedicalTag: 'RecipeMedicalTag',
  DietaryTag: 'DietaryTag',
  RecipeDietaryTag: 'RecipeDietaryTag',
  PracticalTag: 'PracticalTag',
  RecipePracticalTag: 'RecipePracticalTag',
  NutritionalTag: 'NutritionalTag',
  RecipeNutritionalTag: 'RecipeNutritionalTag',
  MealPlan: 'MealPlan',
  MealPlanItem: 'MealPlanItem',
  ShoppingList: 'ShoppingList',
  ShoppingListItem: 'ShoppingListItem',
  UserFavoriteRecipe: 'UserFavoriteRecipe',
  Subscription: 'Subscription',
  Feedback: 'Feedback',
  ABTest: 'ABTest'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
